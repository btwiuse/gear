// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated trait implementation for regression analysis tool
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION {{version}}
//! DATE: {{date}}
//! EXECUTION: {{cmd.execution}}, WASM-EXECUTION: {{cmd.wasm_execution}}, CHAIN: {{cmd.chain}}, DB CACHE: {{cmd.db_cache}}

// Executed Command:
//{{#each args as |arg|}} {{arg}}{{/each}}

#![cfg_attr(rustfmt, rustfmt_skip)]

use pallet_gear::WeightInfo;
use frame_support::weights::Weight;
use std::marker::PhantomData;
use crate::WEIGHTS_JSON;

/// Weights for {{pallet}} using the runner.
pub struct BenchmarkWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for BenchmarkWeight<T> {
    fn initial_cost() -> Weight {
        pallet_gear::GearWeight::<T>::initial_cost()
    }
    fn allocation_cost() -> Weight {
        pallet_gear::GearWeight::<T>::allocation_cost()
    }
    fn grow_cost() -> Weight {
        pallet_gear::GearWeight::<T>::grow_cost()
    }
    fn load_cost() -> Weight {
        pallet_gear::GearWeight::<T>::load_cost()
    }
	{{#each benchmarks as |benchmark|}}
	fn {{benchmark.name~}}
	(
		{{~#each benchmark.components as |c| ~}}
		{{c.name}}: u32, {{/each~}}
	) -> Weight {
        let components = [
        {{#each benchmark.components as |c|}}
            ("{{c.name}}", {{c.name}} as Weight),
        {{/each}}
        ].into();

        WEIGHTS_JSON["{{benchmark.name}}"].calc_weight::<T>(components)
	}
	{{/each}}
}
