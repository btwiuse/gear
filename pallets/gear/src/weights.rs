// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-01, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("rococo_gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear-collator benchmark pallet --chain=rococo_gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./pallets/gear/src/weights.rs --template=./.maintain/gear-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn initial_cost() -> Weight;
	fn load_cost() -> Weight;
	fn claim_value() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn create_program(s: u32, ) -> Weight;
	fn upload_program(c: u32, s: u32, ) -> Weight;
	fn send_message(p: u32, ) -> Weight;
	fn send_reply(p: u32, ) -> Weight;
	fn initial_allocation(q: u32, ) -> Weight;
	fn alloc_in_handle(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn alloc(r: u32, ) -> Weight;
	fn gas(r: u32, ) -> Weight;
	fn gr_gas_available(r: u32, ) -> Weight;
	fn gr_msg_id(r: u32, ) -> Weight;
	fn gr_origin(r: u32, ) -> Weight;
	fn gr_program_id(r: u32, ) -> Weight;
	fn gr_source(r: u32, ) -> Weight;
	fn gr_value(r: u32, ) -> Weight;
	fn gr_value_available(r: u32, ) -> Weight;
	fn gr_size(r: u32, ) -> Weight;
	fn gr_read(r: u32, ) -> Weight;
	fn gr_read_per_kb(n: u32, ) -> Weight;
	fn gr_block_height(r: u32, ) -> Weight;
	fn gr_block_timestamp(r: u32, ) -> Weight;
	fn gr_send_init(r: u32, ) -> Weight;
	fn gr_send_push(r: u32, ) -> Weight;
	fn gr_send_push_per_kb(n: u32, ) -> Weight;
	fn gr_send_commit(r: u32, ) -> Weight;
	fn gr_send_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_commit(r: u32, ) -> Weight;
	fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
	fn gr_reply_push(r: u32, ) -> Weight;
	fn gr_reply_push_per_kb(n: u32, ) -> Weight;
	fn gr_reply_to(r: u32, ) -> Weight;
	fn gr_debug(r: u32, ) -> Weight;
	fn gr_exit_code(r: u32, ) -> Weight;
	fn gr_exit(r: u32, ) -> Weight;
	fn gr_leave(r: u32, ) -> Weight;
	fn gr_wait(r: u32, ) -> Weight;
	fn gr_wait_for(r: u32, ) -> Weight;
	fn gr_wait_no_more(r: u32, ) -> Weight;
	fn gr_wake(r: u32, ) -> Weight;
	fn gr_create_program_wgas(r: u32, ) -> Weight;
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct GearWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for GearWeight<T> {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		T::DbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		T::DbWeight::get().reads(1 as Weight)
	}
	fn claim_value() -> Weight {
		(72_968_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn upload_code(c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((39_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn create_program(s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn upload_program(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((40_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn send_message(p: u32, ) -> Weight {
		(58_600_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn send_reply(p: u32, ) -> Weight {
		(97_992_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn initial_allocation(_q: u32, ) -> Weight {
		(174_416_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(27 as Weight))
			.saturating_add(T::DbWeight::get().writes(24 as Weight))
	}
	fn alloc_in_handle(_q: u32, ) -> Weight {
		(471_339_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(28 as Weight))
			.saturating_add(T::DbWeight::get().writes(25 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((41_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(64_245_297_000 as Weight)
			// Standard Error: 7_238_000
			.saturating_add((30_266_000 as Weight).saturating_mul(r as Weight))
	}
	fn gas(_r: u32, ) -> Weight {
		(64_253_465_000 as Weight)
	}
	fn gr_gas_available(_r: u32, ) -> Weight {
		(64_069_965_000 as Weight)
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(63_132_000_000 as Weight)
			// Standard Error: 5_258_000
			.saturating_add((90_431_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(63_698_853_000 as Weight)
			// Standard Error: 4_891_000
			.saturating_add((31_945_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(63_617_085_000 as Weight)
			// Standard Error: 4_715_000
			.saturating_add((38_215_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(63_722_163_000 as Weight)
			// Standard Error: 4_071_000
			.saturating_add((37_572_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(63_326_073_000 as Weight)
			// Standard Error: 4_523_000
			.saturating_add((77_236_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(63_769_554_000 as Weight)
			// Standard Error: 3_528_000
			.saturating_add((45_455_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(63_752_743_000 as Weight)
			// Standard Error: 4_244_000
			.saturating_add((18_133_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(62_401_442_000 as Weight)
			// Standard Error: 20_071_000
			.saturating_add((23_902_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(62_364_309_000 as Weight)
			// Standard Error: 3_689_000
			.saturating_add((14_223_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(63_304_038_000 as Weight)
			// Standard Error: 5_038_000
			.saturating_add((79_876_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_block_timestamp(_r: u32, ) -> Weight {
		(64_725_119_000 as Weight)
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(63_079_972_000 as Weight)
			// Standard Error: 1_972_000
			.saturating_add((59_121_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(63_082_144_000 as Weight)
			// Standard Error: 2_087_000
			.saturating_add((104_369_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(63_693_507_000 as Weight)
			// Standard Error: 387_000
			.saturating_add((49_480_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(61_501_610_000 as Weight)
			// Standard Error: 20_719_000
			.saturating_add((45_129_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(61_622_159_000 as Weight)
			// Standard Error: 3_816_000
			.saturating_add((6_625_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_commit(r: u32, ) -> Weight {
		(64_014_553_000 as Weight)
			// Standard Error: 16_403_000
			.saturating_add((91_419_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_reply_commit_per_kb(_n: u32, ) -> Weight {
		(67_151_210_000 as Weight)
	}
	fn gr_reply_push(r: u32, ) -> Weight {
		(61_681_402_000 as Weight)
			// Standard Error: 20_743_000
			.saturating_add((38_152_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		(63_063_374_000 as Weight)
			// Standard Error: 623_000
			.saturating_add((60_692_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(63_265_816_000 as Weight)
			// Standard Error: 3_140_000
			.saturating_add((31_068_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_debug(r: u32, ) -> Weight {
		(63_305_562_000 as Weight)
			// Standard Error: 2_468_000
			.saturating_add((44_541_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_exit_code(_r: u32, ) -> Weight {
		(63_516_649_000 as Weight)
	}
	fn gr_exit(_r: u32, ) -> Weight {
		(63_168_552_000 as Weight)
	}
	fn gr_leave(_r: u32, ) -> Weight {
		(63_018_377_000 as Weight)
	}
	fn gr_wait(_r: u32, ) -> Weight {
		(63_039_266_000 as Weight)
	}
	fn gr_wait_for(_r: u32, ) -> Weight {
		(63_051_001_000 as Weight)
	}
	fn gr_wait_no_more(_r: u32, ) -> Weight {
		(63_023_656_000 as Weight)
	}
	fn gr_wake(r: u32, ) -> Weight {
		(62_858_508_000 as Weight)
			// Standard Error: 2_437_000
			.saturating_add((97_142_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_create_program_wgas(r: u32, ) -> Weight {
		(63_548_627_000 as Weight)
			// Standard Error: 53_777_000
			.saturating_add((29_474_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
		(63_086_751_000 as Weight)
			// Standard Error: 582_000
			.saturating_add((3_323_000 as Weight).saturating_mul(n as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(138_341_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((785_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(190_395_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((4_009_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(190_209_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((3_761_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(123_704_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((3_116_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(121_291_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((3_076_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(122_748_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_906_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(123_410_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((2_516_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(124_260_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_701_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(126_637_000 as Weight)
			// Standard Error: 0
			.saturating_add((9_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(122_288_000 as Weight)
			// Standard Error: 123_000
			.saturating_add((7_752_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(132_807_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((11_237_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(144_230_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((767_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(123_460_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_209_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(123_342_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_229_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(122_748_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_814_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(127_610_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((1_724_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(128_985_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((1_802_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(155_490_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_241_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(121_733_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_842_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(123_283_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_856_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(123_057_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_799_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(123_245_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((1_839_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(123_603_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_811_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(127_243_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((1_677_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(122_975_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_799_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(121_115_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_530_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(124_007_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_433_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(121_885_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_452_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(121_302_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_516_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(130_897_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((2_266_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(123_580_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_473_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(123_764_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((2_413_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(122_979_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_429_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(122_392_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((2_501_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(124_709_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_411_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(129_670_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((2_285_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(132_028_000 as Weight)
			// Standard Error: 55_000
			.saturating_add((2_253_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(123_429_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_504_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(122_182_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_498_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(122_857_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_567_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(123_543_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_481_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(123_443_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((2_575_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(122_189_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_525_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(123_754_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_518_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(123_454_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_527_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(124_235_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_463_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(131_645_000 as Weight)
			// Standard Error: 55_000
			.saturating_add((2_222_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(124_700_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((2_488_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(123_383_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_527_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(123_389_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_526_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		RocksDbWeight::get().reads(1 as Weight)
	}
	fn claim_value() -> Weight {
		(72_968_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn upload_code(c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((39_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn create_program(s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn upload_program(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((40_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn send_message(p: u32, ) -> Weight {
		(58_600_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn send_reply(p: u32, ) -> Weight {
		(97_992_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn initial_allocation(_q: u32, ) -> Weight {
		(174_416_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(27 as Weight))
			.saturating_add(RocksDbWeight::get().writes(24 as Weight))
	}
	fn alloc_in_handle(_q: u32, ) -> Weight {
		(471_339_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(28 as Weight))
			.saturating_add(RocksDbWeight::get().writes(25 as Weight))
	}
	fn reinstrument(c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((41_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn alloc(r: u32, ) -> Weight {
		(64_245_297_000 as Weight)
			// Standard Error: 7_238_000
			.saturating_add((30_266_000 as Weight).saturating_mul(r as Weight))
	}
	fn gas(_r: u32, ) -> Weight {
		(64_253_465_000 as Weight)
	}
	fn gr_gas_available(_r: u32, ) -> Weight {
		(64_069_965_000 as Weight)
	}
	fn gr_msg_id(r: u32, ) -> Weight {
		(63_132_000_000 as Weight)
			// Standard Error: 5_258_000
			.saturating_add((90_431_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_origin(r: u32, ) -> Weight {
		(63_698_853_000 as Weight)
			// Standard Error: 4_891_000
			.saturating_add((31_945_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_program_id(r: u32, ) -> Weight {
		(63_617_085_000 as Weight)
			// Standard Error: 4_715_000
			.saturating_add((38_215_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_source(r: u32, ) -> Weight {
		(63_722_163_000 as Weight)
			// Standard Error: 4_071_000
			.saturating_add((37_572_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_value(r: u32, ) -> Weight {
		(63_326_073_000 as Weight)
			// Standard Error: 4_523_000
			.saturating_add((77_236_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_value_available(r: u32, ) -> Weight {
		(63_769_554_000 as Weight)
			// Standard Error: 3_528_000
			.saturating_add((45_455_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_size(r: u32, ) -> Weight {
		(63_752_743_000 as Weight)
			// Standard Error: 4_244_000
			.saturating_add((18_133_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read(r: u32, ) -> Weight {
		(62_401_442_000 as Weight)
			// Standard Error: 20_071_000
			.saturating_add((23_902_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_read_per_kb(n: u32, ) -> Weight {
		(62_364_309_000 as Weight)
			// Standard Error: 3_689_000
			.saturating_add((14_223_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_block_height(r: u32, ) -> Weight {
		(63_304_038_000 as Weight)
			// Standard Error: 5_038_000
			.saturating_add((79_876_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_block_timestamp(_r: u32, ) -> Weight {
		(64_725_119_000 as Weight)
	}
	fn gr_send_init(r: u32, ) -> Weight {
		(63_079_972_000 as Weight)
			// Standard Error: 1_972_000
			.saturating_add((59_121_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_push(r: u32, ) -> Weight {
		(63_082_144_000 as Weight)
			// Standard Error: 2_087_000
			.saturating_add((104_369_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_push_per_kb(n: u32, ) -> Weight {
		(63_693_507_000 as Weight)
			// Standard Error: 387_000
			.saturating_add((49_480_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_send_commit(r: u32, ) -> Weight {
		(61_501_610_000 as Weight)
			// Standard Error: 20_719_000
			.saturating_add((45_129_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_send_commit_per_kb(n: u32, ) -> Weight {
		(61_622_159_000 as Weight)
			// Standard Error: 3_816_000
			.saturating_add((6_625_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_commit(r: u32, ) -> Weight {
		(64_014_553_000 as Weight)
			// Standard Error: 16_403_000
			.saturating_add((91_419_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_reply_commit_per_kb(_n: u32, ) -> Weight {
		(67_151_210_000 as Weight)
	}
	fn gr_reply_push(r: u32, ) -> Weight {
		(61_681_402_000 as Weight)
			// Standard Error: 20_743_000
			.saturating_add((38_152_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_reply_push_per_kb(n: u32, ) -> Weight {
		(63_063_374_000 as Weight)
			// Standard Error: 623_000
			.saturating_add((60_692_000 as Weight).saturating_mul(n as Weight))
	}
	fn gr_reply_to(r: u32, ) -> Weight {
		(63_265_816_000 as Weight)
			// Standard Error: 3_140_000
			.saturating_add((31_068_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_debug(r: u32, ) -> Weight {
		(63_305_562_000 as Weight)
			// Standard Error: 2_468_000
			.saturating_add((44_541_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_exit_code(_r: u32, ) -> Weight {
		(63_516_649_000 as Weight)
	}
	fn gr_exit(_r: u32, ) -> Weight {
		(63_168_552_000 as Weight)
	}
	fn gr_leave(_r: u32, ) -> Weight {
		(63_018_377_000 as Weight)
	}
	fn gr_wait(_r: u32, ) -> Weight {
		(63_039_266_000 as Weight)
	}
	fn gr_wait_for(_r: u32, ) -> Weight {
		(63_051_001_000 as Weight)
	}
	fn gr_wait_no_more(_r: u32, ) -> Weight {
		(63_023_656_000 as Weight)
	}
	fn gr_wake(r: u32, ) -> Weight {
		(62_858_508_000 as Weight)
			// Standard Error: 2_437_000
			.saturating_add((97_142_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_create_program_wgas(r: u32, ) -> Weight {
		(63_548_627_000 as Weight)
			// Standard Error: 53_777_000
			.saturating_add((29_474_000 as Weight).saturating_mul(r as Weight))
	}
	fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
		(63_086_751_000 as Weight)
			// Standard Error: 582_000
			.saturating_add((3_323_000 as Weight).saturating_mul(n as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(138_341_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((785_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(190_395_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((4_009_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(190_209_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((3_761_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(123_704_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((3_116_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(121_291_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((3_076_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(122_748_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_906_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(123_410_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((2_516_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(124_260_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_701_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(126_637_000 as Weight)
			// Standard Error: 0
			.saturating_add((9_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(122_288_000 as Weight)
			// Standard Error: 123_000
			.saturating_add((7_752_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(132_807_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((11_237_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(144_230_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((767_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(123_460_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_209_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(123_342_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_229_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(122_748_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_814_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(127_610_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((1_724_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(128_985_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((1_802_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(155_490_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_241_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(121_733_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_842_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(123_283_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_856_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(123_057_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_799_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(123_245_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((1_839_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(123_603_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_811_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(127_243_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((1_677_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(122_975_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_799_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(121_115_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_530_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(124_007_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_433_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(121_885_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_452_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(121_302_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_516_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(130_897_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((2_266_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(123_580_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_473_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(123_764_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((2_413_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(122_979_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_429_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(122_392_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((2_501_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(124_709_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_411_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(129_670_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((2_285_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(132_028_000 as Weight)
			// Standard Error: 55_000
			.saturating_add((2_253_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(123_429_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_504_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(122_182_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_498_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(122_857_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_567_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(123_543_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_481_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(123_443_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((2_575_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(122_189_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_525_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(123_754_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_518_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(123_454_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_527_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(124_235_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_463_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(131_645_000 as Weight)
			// Standard Error: 55_000
			.saturating_add((2_222_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(124_700_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((2_488_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(123_383_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_527_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(123_389_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_526_000 as Weight).saturating_mul(r as Weight))
	}
}
