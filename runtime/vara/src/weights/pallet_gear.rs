// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear-node benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn initial_cost() -> Weight;
	fn load_cost() -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn gas(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_msg_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_no_more(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		T::DbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		T::DbWeight::get().reads(1 as Weight)
	}
    fn claim_value() -> Weight {
        (139_760_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(8 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn upload_code(c: u32, ) -> Weight {
        (33_962_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn create_program(s: u32, ) -> Weight {
        (2_401_000 as Weight)
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn upload_program(c: u32, s: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((49_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(11 as Weight))
    }
    fn send_message(p: u32, ) -> Weight {
        (71_901_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn send_reply(p: u32, ) -> Weight {
        (113_386_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(14 as Weight))
            .saturating_add(T::DbWeight::get().writes(11 as Weight))
    }
    fn initial_allocation(_q: u32, ) -> Weight {
        (188_550_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(25 as Weight))
            .saturating_add(T::DbWeight::get().writes(23 as Weight))
    }
    fn alloc_in_handle(_q: u32, ) -> Weight {
        (289_552_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(26 as Weight))
            .saturating_add(T::DbWeight::get().writes(24 as Weight))
    }
    fn reinstrument(c: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn alloc(r: u32, ) -> Weight {
        (86_434_000 as Weight)
            // Standard Error: 140_000
            .saturating_add((168_929_000 as Weight).saturating_mul(r as Weight))
    }
    fn gas(r: u32, ) -> Weight {
        (79_449_000 as Weight)
            // Standard Error: 90_000
            .saturating_add((61_125_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_gas_available(r: u32, ) -> Weight {
        (79_918_000 as Weight)
            // Standard Error: 84_000
            .saturating_add((59_354_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_msg_id(r: u32, ) -> Weight {
        (116_103_000 as Weight)
            // Standard Error: 87_000
            .saturating_add((73_215_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_origin(r: u32, ) -> Weight {
        (114_783_000 as Weight)
            // Standard Error: 88_000
            .saturating_add((73_196_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_program_id(r: u32, ) -> Weight {
        (113_513_000 as Weight)
            // Standard Error: 87_000
            .saturating_add((73_464_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_source(r: u32, ) -> Weight {
        (117_321_000 as Weight)
            // Standard Error: 126_000
            .saturating_add((73_227_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_value(r: u32, ) -> Weight {
        (115_102_000 as Weight)
            // Standard Error: 96_000
            .saturating_add((78_966_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_value_available(r: u32, ) -> Weight {
        (115_692_000 as Weight)
            // Standard Error: 101_000
            .saturating_add((78_895_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_size(r: u32, ) -> Weight {
        (81_612_000 as Weight)
            // Standard Error: 44_000
            .saturating_add((51_397_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read(r: u32, ) -> Weight {
        (96_632_000 as Weight)
            // Standard Error: 117_000
            .saturating_add((76_955_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read_per_kb(n: u32, ) -> Weight {
        (191_818_000 as Weight)
            // Standard Error: 22_000
            .saturating_add((6_830_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_block_height(r: u32, ) -> Weight {
        (80_650_000 as Weight)
            // Standard Error: 63_000
            .saturating_add((51_257_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_block_timestamp(r: u32, ) -> Weight {
        (81_969_000 as Weight)
            // Standard Error: 53_000
            .saturating_add((59_058_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_init(r: u32, ) -> Weight {
        (110_310_000 as Weight)
            // Standard Error: 143_000
            .saturating_add((87_343_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push(r: u32, ) -> Weight {
        (116_886_000 as Weight)
            // Standard Error: 156_000
            .saturating_add((173_688_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        (272_755_000 as Weight)
            // Standard Error: 39_000
            .saturating_add((51_210_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_send_commit(r: u32, ) -> Weight {
        (119_720_000 as Weight)
            // Standard Error: 99_000
            .saturating_add((49_205_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        (122_662_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((1_281_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_reply_commit(r: u32, ) -> Weight {
        (123_307_000 as Weight)
            // Standard Error: 112_000
            .saturating_add((99_994_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        (226_556_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((64_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
    }
    fn gr_reply_push(r: u32, ) -> Weight {
        (97_401_000 as Weight)
            // Standard Error: 63_000
            .saturating_add((80_309_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        (166_633_000 as Weight)
            // Standard Error: 47_000
            .saturating_add((53_608_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_to(r: u32, ) -> Weight {
        (103_378_000 as Weight)
            // Standard Error: 103_000
            .saturating_add((73_896_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_debug(r: u32, ) -> Weight {
        (81_693_000 as Weight)
            // Standard Error: 45_000
            .saturating_add((73_571_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit_code(r: u32, ) -> Weight {
        (80_333_000 as Weight)
            // Standard Error: 47_000
            .saturating_add((51_108_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit(r: u32, ) -> Weight {
        (89_967_000 as Weight)
            // Standard Error: 122_000
            .saturating_add((24_670_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_leave(r: u32, ) -> Weight {
        (74_075_000 as Weight)
            // Standard Error: 156_000
            .saturating_add((13_703_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait(r: u32, ) -> Weight {
        (74_046_000 as Weight)
            // Standard Error: 100_000
            .saturating_add((13_829_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait_for(r: u32, ) -> Weight {
        (74_947_000 as Weight)
            // Standard Error: 165_000
            .saturating_add((34_824_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wait_no_more(r: u32, ) -> Weight {
        (74_607_000 as Weight)
            // Standard Error: 382_000
            .saturating_add((35_737_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wake(r: u32, ) -> Weight {
        (108_895_000 as Weight)
            // Standard Error: 154_000
            .saturating_add((113_083_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        (91_683_000 as Weight)
            // Standard Error: 249_000
            .saturating_add((47_562_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        (144_040_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((1_234_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        (3_002_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64load(r: u32, ) -> Weight {
        (23_130_000 as Weight)
            // Standard Error: 7_000
            .saturating_add((188_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64store(r: u32, ) -> Weight {
        (34_899_000 as Weight)
            // Standard Error: 13_000
            .saturating_add((392_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_select(r: u32, ) -> Weight {
        (3_179_000 as Weight)
            // Standard Error: 0
            .saturating_add((605_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_if(r: u32, ) -> Weight {
        (3_191_000 as Weight)
            // Standard Error: 0
            .saturating_add((612_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br(r: u32, ) -> Weight {
        (3_189_000 as Weight)
            // Standard Error: 0
            .saturating_add((479_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_if(r: u32, ) -> Weight {
        (3_259_000 as Weight)
            // Standard Error: 0
            .saturating_add((520_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table(r: u32, ) -> Weight {
        (3_712_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_565_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        (4_349_000 as Weight)
            // Standard Error: 0
            .saturating_add((7_000 as Weight).saturating_mul(e as Weight))
    }
    fn instr_call(r: u32, ) -> Weight {
        (3_518_000 as Weight)
            // Standard Error: 0
            .saturating_add((637_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect(r: u32, ) -> Weight {
        (3_995_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_481_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        (4_815_000 as Weight)
            // Standard Error: 0
            .saturating_add((77_000 as Weight).saturating_mul(p as Weight))
    }
    fn instr_local_get(r: u32, ) -> Weight {
        (3_153_000 as Weight)
            // Standard Error: 0
            .saturating_add((23_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_set(r: u32, ) -> Weight {
        (3_183_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_tee(r: u32, ) -> Weight {
        (3_179_000 as Weight)
            // Standard Error: 0
            .saturating_add((52_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_get(r: u32, ) -> Weight {
        (14_887_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((18_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_set(r: u32, ) -> Weight {
        (13_953_000 as Weight)
            // Standard Error: 0
            .saturating_add((73_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_memory_current(r: u32, ) -> Weight {
        (5_958_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_190_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64clz(r: u32, ) -> Weight {
        (3_176_000 as Weight)
            // Standard Error: 0
            .saturating_add((759_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ctz(r: u32, ) -> Weight {
        (3_196_000 as Weight)
            // Standard Error: 0
            .saturating_add((728_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64popcnt(r: u32, ) -> Weight {
        (3_086_000 as Weight)
            // Standard Error: 0
            .saturating_add((43_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eqz(r: u32, ) -> Weight {
        (3_088_000 as Weight)
            // Standard Error: 0
            .saturating_add((97_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        (3_036_000 as Weight)
            // Standard Error: 0
            .saturating_add((29_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendui32(r: u32, ) -> Weight {
        (3_021_000 as Weight)
            // Standard Error: 0
            .saturating_add((19_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        (3_039_000 as Weight)
            // Standard Error: 0
            .saturating_add((19_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eq(r: u32, ) -> Weight {
        (3_048_000 as Weight)
            // Standard Error: 0
            .saturating_add((99_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ne(r: u32, ) -> Weight {
        (3_017_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64lts(r: u32, ) -> Weight {
        (3_017_000 as Weight)
            // Standard Error: 0
            .saturating_add((102_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ltu(r: u32, ) -> Weight {
        (3_073_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gts(r: u32, ) -> Weight {
        (3_030_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gtu(r: u32, ) -> Weight {
        (3_128_000 as Weight)
            // Standard Error: 0
            .saturating_add((97_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64les(r: u32, ) -> Weight {
        (3_062_000 as Weight)
            // Standard Error: 0
            .saturating_add((102_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64leu(r: u32, ) -> Weight {
        (3_022_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ges(r: u32, ) -> Weight {
        (3_036_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64geu(r: u32, ) -> Weight {
        (3_101_000 as Weight)
            // Standard Error: 0
            .saturating_add((98_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64add(r: u32, ) -> Weight {
        (3_115_000 as Weight)
            // Standard Error: 0
            .saturating_add((80_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64sub(r: u32, ) -> Weight {
        (3_119_000 as Weight)
            // Standard Error: 0
            .saturating_add((81_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64mul(r: u32, ) -> Weight {
        (3_037_000 as Weight)
            // Standard Error: 0
            .saturating_add((115_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divs(r: u32, ) -> Weight {
        (3_252_000 as Weight)
            // Standard Error: 0
            .saturating_add((448_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divu(r: u32, ) -> Weight {
        (3_203_000 as Weight)
            // Standard Error: 0
            .saturating_add((446_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rems(r: u32, ) -> Weight {
        (3_454_000 as Weight)
            // Standard Error: 0
            .saturating_add((813_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64remu(r: u32, ) -> Weight {
        (3_228_000 as Weight)
            // Standard Error: 0
            .saturating_add((444_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64and(r: u32, ) -> Weight {
        (3_106_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64or(r: u32, ) -> Weight {
        (3_064_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64xor(r: u32, ) -> Weight {
        (3_093_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shl(r: u32, ) -> Weight {
        (3_098_000 as Weight)
            // Standard Error: 0
            .saturating_add((73_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shrs(r: u32, ) -> Weight {
        (3_113_000 as Weight)
            // Standard Error: 0
            .saturating_add((73_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shru(r: u32, ) -> Weight {
        (3_115_000 as Weight)
            // Standard Error: 0
            .saturating_add((73_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotl(r: u32, ) -> Weight {
        (3_112_000 as Weight)
            // Standard Error: 0
            .saturating_add((74_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotr(r: u32, ) -> Weight {
        (3_082_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		RocksDbWeight::get().reads(1 as Weight)
	}
    fn claim_value() -> Weight {
        (139_760_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(8 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn upload_code(c: u32, ) -> Weight {
        (33_962_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
    fn create_program(s: u32, ) -> Weight {
        (127_559_000 as Weight)
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn upload_program(c: u32, s: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((49_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(11 as Weight))
    }
    fn send_message(p: u32, ) -> Weight {
        (71_901_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn send_reply(p: u32, ) -> Weight {
        (113_386_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(14 as Weight))
            .saturating_add(RocksDbWeight::get().writes(11 as Weight))
    }
    fn initial_allocation(_q: u32, ) -> Weight {
        (188_550_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(25 as Weight))
            .saturating_add(RocksDbWeight::get().writes(23 as Weight))
    }
    fn alloc_in_handle(_q: u32, ) -> Weight {
        (289_552_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(26 as Weight))
            .saturating_add(RocksDbWeight::get().writes(24 as Weight))
    }
    fn reinstrument(c: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
    }
    fn alloc(r: u32, ) -> Weight {
        (86_434_000 as Weight)
            // Standard Error: 140_000
            .saturating_add((168_929_000 as Weight).saturating_mul(r as Weight))
    }
    fn gas(r: u32, ) -> Weight {
        (79_449_000 as Weight)
            // Standard Error: 90_000
            .saturating_add((61_125_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_gas_available(r: u32, ) -> Weight {
        (79_918_000 as Weight)
            // Standard Error: 84_000
            .saturating_add((59_354_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_msg_id(r: u32, ) -> Weight {
        (116_103_000 as Weight)
            // Standard Error: 87_000
            .saturating_add((73_215_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_origin(r: u32, ) -> Weight {
        (114_783_000 as Weight)
            // Standard Error: 88_000
            .saturating_add((73_196_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_program_id(r: u32, ) -> Weight {
        (113_513_000 as Weight)
            // Standard Error: 87_000
            .saturating_add((73_464_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_source(r: u32, ) -> Weight {
        (117_321_000 as Weight)
            // Standard Error: 126_000
            .saturating_add((73_227_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_value(r: u32, ) -> Weight {
        (115_102_000 as Weight)
            // Standard Error: 96_000
            .saturating_add((78_966_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_value_available(r: u32, ) -> Weight {
        (115_692_000 as Weight)
            // Standard Error: 101_000
            .saturating_add((78_895_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_size(r: u32, ) -> Weight {
        (81_612_000 as Weight)
            // Standard Error: 44_000
            .saturating_add((51_397_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read(r: u32, ) -> Weight {
        (96_632_000 as Weight)
            // Standard Error: 117_000
            .saturating_add((76_955_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read_per_kb(n: u32, ) -> Weight {
        (191_818_000 as Weight)
            // Standard Error: 22_000
            .saturating_add((6_830_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_block_height(r: u32, ) -> Weight {
        (80_650_000 as Weight)
            // Standard Error: 63_000
            .saturating_add((51_257_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_block_timestamp(r: u32, ) -> Weight {
        (81_969_000 as Weight)
            // Standard Error: 53_000
            .saturating_add((59_058_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_init(r: u32, ) -> Weight {
        (110_310_000 as Weight)
            // Standard Error: 143_000
            .saturating_add((87_343_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push(r: u32, ) -> Weight {
        (116_886_000 as Weight)
            // Standard Error: 156_000
            .saturating_add((173_688_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        (272_755_000 as Weight)
            // Standard Error: 39_000
            .saturating_add((51_210_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_send_commit(r: u32, ) -> Weight {
        (119_720_000 as Weight)
            // Standard Error: 99_000
            .saturating_add((49_205_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        (122_662_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((1_281_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_reply_commit(r: u32, ) -> Weight {
        (123_307_000 as Weight)
            // Standard Error: 112_000
            .saturating_add((99_994_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        (226_556_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((64_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(4 as Weight))
    }
    fn gr_reply_push(r: u32, ) -> Weight {
        (97_401_000 as Weight)
            // Standard Error: 63_000
            .saturating_add((80_309_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        (166_633_000 as Weight)
            // Standard Error: 47_000
            .saturating_add((53_608_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_to(r: u32, ) -> Weight {
        (103_378_000 as Weight)
            // Standard Error: 103_000
            .saturating_add((73_896_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_debug(r: u32, ) -> Weight {
        (81_693_000 as Weight)
            // Standard Error: 45_000
            .saturating_add((73_571_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit_code(r: u32, ) -> Weight {
        (80_333_000 as Weight)
            // Standard Error: 47_000
            .saturating_add((51_108_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit(r: u32, ) -> Weight {
        (89_967_000 as Weight)
            // Standard Error: 122_000
            .saturating_add((24_670_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_leave(r: u32, ) -> Weight {
        (74_075_000 as Weight)
            // Standard Error: 156_000
            .saturating_add((13_703_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait(r: u32, ) -> Weight {
        (74_046_000 as Weight)
            // Standard Error: 100_000
            .saturating_add((13_829_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait_for(r: u32, ) -> Weight {
        (74_947_000 as Weight)
            // Standard Error: 165_000
            .saturating_add((34_824_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wait_no_more(r: u32, ) -> Weight {
        (74_607_000 as Weight)
            // Standard Error: 382_000
            .saturating_add((35_737_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wake(r: u32, ) -> Weight {
        (108_895_000 as Weight)
            // Standard Error: 154_000
            .saturating_add((113_083_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        (91_683_000 as Weight)
            // Standard Error: 249_000
            .saturating_add((47_562_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        (144_040_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((1_234_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        (3_002_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64load(r: u32, ) -> Weight {
        (23_130_000 as Weight)
            // Standard Error: 7_000
            .saturating_add((188_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64store(r: u32, ) -> Weight {
        (34_899_000 as Weight)
            // Standard Error: 13_000
            .saturating_add((392_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_select(r: u32, ) -> Weight {
        (3_179_000 as Weight)
            // Standard Error: 0
            .saturating_add((605_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_if(r: u32, ) -> Weight {
        (3_191_000 as Weight)
            // Standard Error: 0
            .saturating_add((612_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br(r: u32, ) -> Weight {
        (3_189_000 as Weight)
            // Standard Error: 0
            .saturating_add((479_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_if(r: u32, ) -> Weight {
        (3_259_000 as Weight)
            // Standard Error: 0
            .saturating_add((520_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table(r: u32, ) -> Weight {
        (3_712_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_565_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        (4_349_000 as Weight)
            // Standard Error: 0
            .saturating_add((7_000 as Weight).saturating_mul(e as Weight))
    }
    fn instr_call(r: u32, ) -> Weight {
        (3_518_000 as Weight)
            // Standard Error: 0
            .saturating_add((637_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect(r: u32, ) -> Weight {
        (3_995_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_481_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        (4_815_000 as Weight)
            // Standard Error: 0
            .saturating_add((77_000 as Weight).saturating_mul(p as Weight))
    }
    fn instr_local_get(r: u32, ) -> Weight {
        (3_153_000 as Weight)
            // Standard Error: 0
            .saturating_add((23_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_set(r: u32, ) -> Weight {
        (3_183_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_tee(r: u32, ) -> Weight {
        (3_179_000 as Weight)
            // Standard Error: 0
            .saturating_add((52_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_get(r: u32, ) -> Weight {
        (14_887_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((18_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_set(r: u32, ) -> Weight {
        (13_953_000 as Weight)
            // Standard Error: 0
            .saturating_add((73_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_memory_current(r: u32, ) -> Weight {
        (5_958_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_190_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64clz(r: u32, ) -> Weight {
        (3_176_000 as Weight)
            // Standard Error: 0
            .saturating_add((759_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ctz(r: u32, ) -> Weight {
        (3_196_000 as Weight)
            // Standard Error: 0
            .saturating_add((728_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64popcnt(r: u32, ) -> Weight {
        (3_086_000 as Weight)
            // Standard Error: 0
            .saturating_add((43_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eqz(r: u32, ) -> Weight {
        (3_088_000 as Weight)
            // Standard Error: 0
            .saturating_add((97_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        (3_036_000 as Weight)
            // Standard Error: 0
            .saturating_add((29_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendui32(r: u32, ) -> Weight {
        (3_021_000 as Weight)
            // Standard Error: 0
            .saturating_add((19_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        (3_039_000 as Weight)
            // Standard Error: 0
            .saturating_add((19_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eq(r: u32, ) -> Weight {
        (3_048_000 as Weight)
            // Standard Error: 0
            .saturating_add((99_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ne(r: u32, ) -> Weight {
        (3_017_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64lts(r: u32, ) -> Weight {
        (3_017_000 as Weight)
            // Standard Error: 0
            .saturating_add((102_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ltu(r: u32, ) -> Weight {
        (3_073_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gts(r: u32, ) -> Weight {
        (3_030_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gtu(r: u32, ) -> Weight {
        (3_128_000 as Weight)
            // Standard Error: 0
            .saturating_add((97_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64les(r: u32, ) -> Weight {
        (3_062_000 as Weight)
            // Standard Error: 0
            .saturating_add((102_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64leu(r: u32, ) -> Weight {
        (3_022_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ges(r: u32, ) -> Weight {
        (3_036_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64geu(r: u32, ) -> Weight {
        (3_101_000 as Weight)
            // Standard Error: 0
            .saturating_add((98_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64add(r: u32, ) -> Weight {
        (3_115_000 as Weight)
            // Standard Error: 0
            .saturating_add((80_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64sub(r: u32, ) -> Weight {
        (3_119_000 as Weight)
            // Standard Error: 0
            .saturating_add((81_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64mul(r: u32, ) -> Weight {
        (3_037_000 as Weight)
            // Standard Error: 0
            .saturating_add((115_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divs(r: u32, ) -> Weight {
        (3_252_000 as Weight)
            // Standard Error: 0
            .saturating_add((448_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divu(r: u32, ) -> Weight {
        (3_203_000 as Weight)
            // Standard Error: 0
            .saturating_add((446_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rems(r: u32, ) -> Weight {
        (3_454_000 as Weight)
            // Standard Error: 0
            .saturating_add((813_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64remu(r: u32, ) -> Weight {
        (3_228_000 as Weight)
            // Standard Error: 0
            .saturating_add((444_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64and(r: u32, ) -> Weight {
        (3_106_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64or(r: u32, ) -> Weight {
        (3_064_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64xor(r: u32, ) -> Weight {
        (3_093_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shl(r: u32, ) -> Weight {
        (3_098_000 as Weight)
            // Standard Error: 0
            .saturating_add((73_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shrs(r: u32, ) -> Weight {
        (3_113_000 as Weight)
            // Standard Error: 0
            .saturating_add((73_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shru(r: u32, ) -> Weight {
        (3_115_000 as Weight)
            // Standard Error: 0
            .saturating_add((73_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotl(r: u32, ) -> Weight {
        (3_112_000 as Weight)
            // Standard Error: 0
            .saturating_add((74_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotr(r: u32, ) -> Weight {
        (3_082_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
}