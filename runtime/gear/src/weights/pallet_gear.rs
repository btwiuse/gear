// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-05, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear-node benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn initial_cost() -> Weight;
	fn load_cost() -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn gas(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_msg_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_no_more(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		T::DbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		T::DbWeight::get().reads(1 as Weight)
	}
    fn claim_value() -> Weight {
        (137_946_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(8 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn upload_code(c: u32, ) -> Weight {
        (4_996_000 as Weight)
            // Standard Error: 0
            .saturating_add((49_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn create_program(s: u32, ) -> Weight {
        (6_362_000 as Weight)
            // Standard Error: 0
            .saturating_add((2_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn upload_program(c: u32, s: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(11 as Weight))
    }
    fn send_message(p: u32, ) -> Weight {
        (70_787_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn send_reply(p: u32, ) -> Weight {
        (112_827_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(14 as Weight))
            .saturating_add(T::DbWeight::get().writes(11 as Weight))
    }
    fn initial_allocation(_q: u32, ) -> Weight {
        (181_244_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(25 as Weight))
            .saturating_add(T::DbWeight::get().writes(23 as Weight))
    }
    fn alloc_in_handle(_q: u32, ) -> Weight {
        (283_279_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(26 as Weight))
            .saturating_add(T::DbWeight::get().writes(24 as Weight))
    }
    fn reinstrument(c: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn alloc(r: u32, ) -> Weight {
        (87_992_000 as Weight)
            // Standard Error: 213_000
            .saturating_add((171_754_000 as Weight).saturating_mul(r as Weight))
    }
    fn gas(r: u32, ) -> Weight {
        (82_827_000 as Weight)
            // Standard Error: 126_000
            .saturating_add((62_127_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_gas_available(r: u32, ) -> Weight {
        (85_298_000 as Weight)
            // Standard Error: 45_000
            .saturating_add((59_674_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_msg_id(r: u32, ) -> Weight {
        (117_303_000 as Weight)
            // Standard Error: 152_000
            .saturating_add((72_812_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_origin(r: u32, ) -> Weight {
        (112_971_000 as Weight)
            // Standard Error: 103_000
            .saturating_add((73_355_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_program_id(r: u32, ) -> Weight {
        (114_787_000 as Weight)
            // Standard Error: 91_000
            .saturating_add((72_538_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_source(r: u32, ) -> Weight {
        (112_932_000 as Weight)
            // Standard Error: 110_000
            .saturating_add((73_279_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_value(r: u32, ) -> Weight {
        (115_042_000 as Weight)
            // Standard Error: 84_000
            .saturating_add((78_061_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_value_available(r: u32, ) -> Weight {
        (113_319_000 as Weight)
            // Standard Error: 107_000
            .saturating_add((78_904_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_size(r: u32, ) -> Weight {
        (84_724_000 as Weight)
            // Standard Error: 41_000
            .saturating_add((51_314_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read(r: u32, ) -> Weight {
        (97_878_000 as Weight)
            // Standard Error: 62_000
            .saturating_add((75_567_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read_per_kb(n: u32, ) -> Weight {
        (189_958_000 as Weight)
            // Standard Error: 20_000
            .saturating_add((6_822_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_block_height(r: u32, ) -> Weight {
        (82_858_000 as Weight)
            // Standard Error: 51_000
            .saturating_add((51_578_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_block_timestamp(r: u32, ) -> Weight {
        (90_458_000 as Weight)
            // Standard Error: 117_000
            .saturating_add((58_872_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_init(r: u32, ) -> Weight {
        (104_769_000 as Weight)
            // Standard Error: 101_000
            .saturating_add((87_699_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push(r: u32, ) -> Weight {
        (110_632_000 as Weight)
            // Standard Error: 142_000
            .saturating_add((173_606_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        (261_957_000 as Weight)
            // Standard Error: 47_000
            .saturating_add((43_926_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_send_commit(r: u32, ) -> Weight {
        (120_081_000 as Weight)
            // Standard Error: 104_000
            .saturating_add((48_273_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        (121_705_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((1_211_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_reply_commit(r: u32, ) -> Weight {
        (121_670_000 as Weight)
            // Standard Error: 116_000
            .saturating_add((97_104_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        (224_040_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((25_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
    }
    fn gr_reply_push(r: u32, ) -> Weight {
        (95_092_000 as Weight)
            // Standard Error: 107_000
            .saturating_add((79_437_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        (169_998_000 as Weight)
            // Standard Error: 46_000
            .saturating_add((45_684_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_to(r: u32, ) -> Weight {
        (103_884_000 as Weight)
            // Standard Error: 98_000
            .saturating_add((73_594_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_debug(r: u32, ) -> Weight {
        (84_730_000 as Weight)
            // Standard Error: 41_000
            .saturating_add((72_002_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit_code(r: u32, ) -> Weight {
        (83_964_000 as Weight)
            // Standard Error: 44_000
            .saturating_add((51_055_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit(r: u32, ) -> Weight {
        (89_534_000 as Weight)
            // Standard Error: 200_000
            .saturating_add((25_383_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_leave(r: u32, ) -> Weight {
        (77_288_000 as Weight)
            // Standard Error: 138_000
            .saturating_add((13_451_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait(r: u32, ) -> Weight {
        (77_327_000 as Weight)
            // Standard Error: 120_000
            .saturating_add((13_924_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait_for(r: u32, ) -> Weight {
        (77_968_000 as Weight)
            // Standard Error: 137_000
            .saturating_add((31_585_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wait_no_more(r: u32, ) -> Weight {
        (78_401_000 as Weight)
            // Standard Error: 189_000
            .saturating_add((31_564_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wake(r: u32, ) -> Weight {
        (107_558_000 as Weight)
            // Standard Error: 145_000
            .saturating_add((111_297_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        (91_722_000 as Weight)
            // Standard Error: 172_000
            .saturating_add((45_474_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        (141_992_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((1_193_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        (3_035_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64load(r: u32, ) -> Weight {
        (23_160_000 as Weight)
            // Standard Error: 6_000
            .saturating_add((180_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64store(r: u32, ) -> Weight {
        (35_183_000 as Weight)
            // Standard Error: 11_000
            .saturating_add((374_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_select(r: u32, ) -> Weight {
        (3_197_000 as Weight)
            // Standard Error: 0
            .saturating_add((605_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_if(r: u32, ) -> Weight {
        (3_209_000 as Weight)
            // Standard Error: 0
            .saturating_add((612_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br(r: u32, ) -> Weight {
        (3_290_000 as Weight)
            // Standard Error: 0
            .saturating_add((477_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_if(r: u32, ) -> Weight {
        (3_256_000 as Weight)
            // Standard Error: 0
            .saturating_add((520_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table(r: u32, ) -> Weight {
        (3_755_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_564_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        (4_433_000 as Weight)
            // Standard Error: 0
            .saturating_add((7_000 as Weight).saturating_mul(e as Weight))
    }
    fn instr_call(r: u32, ) -> Weight {
        (3_557_000 as Weight)
            // Standard Error: 0
            .saturating_add((637_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect(r: u32, ) -> Weight {
        (3_936_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_480_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        (4_900_000 as Weight)
            // Standard Error: 0
            .saturating_add((76_000 as Weight).saturating_mul(p as Weight))
    }
    fn instr_local_get(r: u32, ) -> Weight {
        (3_230_000 as Weight)
            // Standard Error: 0
            .saturating_add((24_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_set(r: u32, ) -> Weight {
        (3_264_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_tee(r: u32, ) -> Weight {
        (3_233_000 as Weight)
            // Standard Error: 0
            .saturating_add((53_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_get(r: u32, ) -> Weight {
        (12_486_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_set(r: u32, ) -> Weight {
        (13_650_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((86_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_memory_current(r: u32, ) -> Weight {
        (8_605_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_189_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64clz(r: u32, ) -> Weight {
        (3_254_000 as Weight)
            // Standard Error: 0
            .saturating_add((758_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ctz(r: u32, ) -> Weight {
        (3_227_000 as Weight)
            // Standard Error: 0
            .saturating_add((729_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64popcnt(r: u32, ) -> Weight {
        (3_135_000 as Weight)
            // Standard Error: 0
            .saturating_add((44_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eqz(r: u32, ) -> Weight {
        (3_149_000 as Weight)
            // Standard Error: 0
            .saturating_add((99_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        (3_142_000 as Weight)
            // Standard Error: 0
            .saturating_add((30_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendui32(r: u32, ) -> Weight {
        (3_165_000 as Weight)
            // Standard Error: 0
            .saturating_add((17_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        (3_133_000 as Weight)
            // Standard Error: 0
            .saturating_add((17_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eq(r: u32, ) -> Weight {
        (3_133_000 as Weight)
            // Standard Error: 0
            .saturating_add((98_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ne(r: u32, ) -> Weight {
        (3_114_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64lts(r: u32, ) -> Weight {
        (3_119_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ltu(r: u32, ) -> Weight {
        (3_092_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gts(r: u32, ) -> Weight {
        (3_109_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gtu(r: u32, ) -> Weight {
        (3_125_000 as Weight)
            // Standard Error: 0
            .saturating_add((98_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64les(r: u32, ) -> Weight {
        (3_156_000 as Weight)
            // Standard Error: 0
            .saturating_add((97_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64leu(r: u32, ) -> Weight {
        (3_179_000 as Weight)
            // Standard Error: 0
            .saturating_add((96_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ges(r: u32, ) -> Weight {
        (3_124_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64geu(r: u32, ) -> Weight {
        (3_146_000 as Weight)
            // Standard Error: 0
            .saturating_add((98_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64add(r: u32, ) -> Weight {
        (3_122_000 as Weight)
            // Standard Error: 0
            .saturating_add((85_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64sub(r: u32, ) -> Weight {
        (3_149_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64mul(r: u32, ) -> Weight {
        (3_213_000 as Weight)
            // Standard Error: 0
            .saturating_add((107_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divs(r: u32, ) -> Weight {
        (3_274_000 as Weight)
            // Standard Error: 0
            .saturating_add((448_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divu(r: u32, ) -> Weight {
        (3_324_000 as Weight)
            // Standard Error: 0
            .saturating_add((444_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rems(r: u32, ) -> Weight {
        (3_590_000 as Weight)
            // Standard Error: 0
            .saturating_add((806_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64remu(r: u32, ) -> Weight {
        (3_307_000 as Weight)
            // Standard Error: 0
            .saturating_add((444_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64and(r: u32, ) -> Weight {
        (3_153_000 as Weight)
            // Standard Error: 0
            .saturating_add((83_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64or(r: u32, ) -> Weight {
        (3_162_000 as Weight)
            // Standard Error: 0
            .saturating_add((84_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64xor(r: u32, ) -> Weight {
        (3_180_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shl(r: u32, ) -> Weight {
        (3_171_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shrs(r: u32, ) -> Weight {
        (3_160_000 as Weight)
            // Standard Error: 0
            .saturating_add((73_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shru(r: u32, ) -> Weight {
        (3_160_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotl(r: u32, ) -> Weight {
        (3_192_000 as Weight)
            // Standard Error: 0
            .saturating_add((72_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotr(r: u32, ) -> Weight {
        (3_178_000 as Weight)
            // Standard Error: 0
            .saturating_add((73_000 as Weight).saturating_mul(r as Weight))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		RocksDbWeight::get().reads(1 as Weight)
	}
    fn claim_value() -> Weight {
        (137_946_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(8 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn upload_code(c: u32, ) -> Weight {
        (4_996_000 as Weight)
            // Standard Error: 0
            .saturating_add((49_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
    fn create_program(s: u32, ) -> Weight {
        (6_362_000 as Weight)
            // Standard Error: 0
            .saturating_add((2_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn upload_program(c: u32, s: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(11 as Weight))
    }
    fn send_message(p: u32, ) -> Weight {
        (70_787_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn send_reply(p: u32, ) -> Weight {
        (112_827_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(14 as Weight))
            .saturating_add(RocksDbWeight::get().writes(11 as Weight))
    }
    fn initial_allocation(_q: u32, ) -> Weight {
        (181_244_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(25 as Weight))
            .saturating_add(RocksDbWeight::get().writes(23 as Weight))
    }
    fn alloc_in_handle(_q: u32, ) -> Weight {
        (283_279_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(26 as Weight))
            .saturating_add(RocksDbWeight::get().writes(24 as Weight))
    }
    fn reinstrument(c: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
    }
    fn alloc(r: u32, ) -> Weight {
        (87_992_000 as Weight)
            // Standard Error: 213_000
            .saturating_add((171_754_000 as Weight).saturating_mul(r as Weight))
    }
    fn gas(r: u32, ) -> Weight {
        (82_827_000 as Weight)
            // Standard Error: 126_000
            .saturating_add((62_127_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_gas_available(r: u32, ) -> Weight {
        (85_298_000 as Weight)
            // Standard Error: 45_000
            .saturating_add((59_674_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_msg_id(r: u32, ) -> Weight {
        (117_303_000 as Weight)
            // Standard Error: 152_000
            .saturating_add((72_812_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_origin(r: u32, ) -> Weight {
        (112_971_000 as Weight)
            // Standard Error: 103_000
            .saturating_add((73_355_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_program_id(r: u32, ) -> Weight {
        (114_787_000 as Weight)
            // Standard Error: 91_000
            .saturating_add((72_538_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_source(r: u32, ) -> Weight {
        (112_932_000 as Weight)
            // Standard Error: 110_000
            .saturating_add((73_279_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_value(r: u32, ) -> Weight {
        (115_042_000 as Weight)
            // Standard Error: 84_000
            .saturating_add((78_061_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_value_available(r: u32, ) -> Weight {
        (113_319_000 as Weight)
            // Standard Error: 107_000
            .saturating_add((78_904_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_size(r: u32, ) -> Weight {
        (84_724_000 as Weight)
            // Standard Error: 41_000
            .saturating_add((51_314_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read(r: u32, ) -> Weight {
        (97_878_000 as Weight)
            // Standard Error: 62_000
            .saturating_add((75_567_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read_per_kb(n: u32, ) -> Weight {
        (189_958_000 as Weight)
            // Standard Error: 20_000
            .saturating_add((6_822_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_block_height(r: u32, ) -> Weight {
        (82_858_000 as Weight)
            // Standard Error: 51_000
            .saturating_add((51_578_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_block_timestamp(r: u32, ) -> Weight {
        (90_458_000 as Weight)
            // Standard Error: 117_000
            .saturating_add((58_872_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_init(r: u32, ) -> Weight {
        (104_769_000 as Weight)
            // Standard Error: 101_000
            .saturating_add((87_699_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push(r: u32, ) -> Weight {
        (110_632_000 as Weight)
            // Standard Error: 142_000
            .saturating_add((173_606_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        (261_957_000 as Weight)
            // Standard Error: 47_000
            .saturating_add((43_926_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_send_commit(r: u32, ) -> Weight {
        (120_081_000 as Weight)
            // Standard Error: 104_000
            .saturating_add((48_273_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        (121_705_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((1_211_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_reply_commit(r: u32, ) -> Weight {
        (121_670_000 as Weight)
            // Standard Error: 116_000
            .saturating_add((97_104_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        (224_040_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((25_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(4 as Weight))
    }
    fn gr_reply_push(r: u32, ) -> Weight {
        (95_092_000 as Weight)
            // Standard Error: 107_000
            .saturating_add((79_437_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        (169_998_000 as Weight)
            // Standard Error: 46_000
            .saturating_add((45_684_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_to(r: u32, ) -> Weight {
        (103_884_000 as Weight)
            // Standard Error: 98_000
            .saturating_add((73_594_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_debug(r: u32, ) -> Weight {
        (84_730_000 as Weight)
            // Standard Error: 41_000
            .saturating_add((72_002_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit_code(r: u32, ) -> Weight {
        (83_964_000 as Weight)
            // Standard Error: 44_000
            .saturating_add((51_055_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit(r: u32, ) -> Weight {
        (89_534_000 as Weight)
            // Standard Error: 200_000
            .saturating_add((25_383_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_leave(r: u32, ) -> Weight {
        (77_288_000 as Weight)
            // Standard Error: 138_000
            .saturating_add((13_451_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait(r: u32, ) -> Weight {
        (77_327_000 as Weight)
            // Standard Error: 120_000
            .saturating_add((13_924_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait_for(r: u32, ) -> Weight {
        (77_968_000 as Weight)
            // Standard Error: 137_000
            .saturating_add((31_585_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wait_no_more(r: u32, ) -> Weight {
        (78_401_000 as Weight)
            // Standard Error: 189_000
            .saturating_add((31_564_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wake(r: u32, ) -> Weight {
        (107_558_000 as Weight)
            // Standard Error: 145_000
            .saturating_add((111_297_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        (91_722_000 as Weight)
            // Standard Error: 172_000
            .saturating_add((45_474_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        (141_992_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((1_193_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        (3_035_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64load(r: u32, ) -> Weight {
        (23_160_000 as Weight)
            // Standard Error: 6_000
            .saturating_add((180_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64store(r: u32, ) -> Weight {
        (35_183_000 as Weight)
            // Standard Error: 11_000
            .saturating_add((374_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_select(r: u32, ) -> Weight {
        (3_197_000 as Weight)
            // Standard Error: 0
            .saturating_add((605_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_if(r: u32, ) -> Weight {
        (3_209_000 as Weight)
            // Standard Error: 0
            .saturating_add((612_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br(r: u32, ) -> Weight {
        (3_290_000 as Weight)
            // Standard Error: 0
            .saturating_add((477_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_if(r: u32, ) -> Weight {
        (3_256_000 as Weight)
            // Standard Error: 0
            .saturating_add((520_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table(r: u32, ) -> Weight {
        (3_755_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_564_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        (4_433_000 as Weight)
            // Standard Error: 0
            .saturating_add((7_000 as Weight).saturating_mul(e as Weight))
    }
    fn instr_call(r: u32, ) -> Weight {
        (3_557_000 as Weight)
            // Standard Error: 0
            .saturating_add((637_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect(r: u32, ) -> Weight {
        (3_936_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_480_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        (4_900_000 as Weight)
            // Standard Error: 0
            .saturating_add((76_000 as Weight).saturating_mul(p as Weight))
    }
    fn instr_local_get(r: u32, ) -> Weight {
        (3_230_000 as Weight)
            // Standard Error: 0
            .saturating_add((24_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_set(r: u32, ) -> Weight {
        (3_264_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_tee(r: u32, ) -> Weight {
        (3_233_000 as Weight)
            // Standard Error: 0
            .saturating_add((53_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_get(r: u32, ) -> Weight {
        (12_486_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_set(r: u32, ) -> Weight {
        (13_650_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((86_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_memory_current(r: u32, ) -> Weight {
        (8_605_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_189_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64clz(r: u32, ) -> Weight {
        (3_254_000 as Weight)
            // Standard Error: 0
            .saturating_add((758_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ctz(r: u32, ) -> Weight {
        (3_227_000 as Weight)
            // Standard Error: 0
            .saturating_add((729_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64popcnt(r: u32, ) -> Weight {
        (3_135_000 as Weight)
            // Standard Error: 0
            .saturating_add((44_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eqz(r: u32, ) -> Weight {
        (3_149_000 as Weight)
            // Standard Error: 0
            .saturating_add((99_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        (3_142_000 as Weight)
            // Standard Error: 0
            .saturating_add((30_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendui32(r: u32, ) -> Weight {
        (3_165_000 as Weight)
            // Standard Error: 0
            .saturating_add((17_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        (3_133_000 as Weight)
            // Standard Error: 0
            .saturating_add((17_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eq(r: u32, ) -> Weight {
        (3_133_000 as Weight)
            // Standard Error: 0
            .saturating_add((98_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ne(r: u32, ) -> Weight {
        (3_114_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64lts(r: u32, ) -> Weight {
        (3_119_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ltu(r: u32, ) -> Weight {
        (3_092_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gts(r: u32, ) -> Weight {
        (3_109_000 as Weight)
            // Standard Error: 0
            .saturating_add((100_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gtu(r: u32, ) -> Weight {
        (3_125_000 as Weight)
            // Standard Error: 0
            .saturating_add((98_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64les(r: u32, ) -> Weight {
        (3_156_000 as Weight)
            // Standard Error: 0
            .saturating_add((97_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64leu(r: u32, ) -> Weight {
        (3_179_000 as Weight)
            // Standard Error: 0
            .saturating_add((96_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ges(r: u32, ) -> Weight {
        (3_124_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64geu(r: u32, ) -> Weight {
        (3_146_000 as Weight)
            // Standard Error: 0
            .saturating_add((98_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64add(r: u32, ) -> Weight {
        (3_122_000 as Weight)
            // Standard Error: 0
            .saturating_add((85_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64sub(r: u32, ) -> Weight {
        (3_149_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64mul(r: u32, ) -> Weight {
        (3_213_000 as Weight)
            // Standard Error: 0
            .saturating_add((107_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divs(r: u32, ) -> Weight {
        (3_274_000 as Weight)
            // Standard Error: 0
            .saturating_add((448_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divu(r: u32, ) -> Weight {
        (3_324_000 as Weight)
            // Standard Error: 0
            .saturating_add((444_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rems(r: u32, ) -> Weight {
        (3_590_000 as Weight)
            // Standard Error: 0
            .saturating_add((806_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64remu(r: u32, ) -> Weight {
        (3_307_000 as Weight)
            // Standard Error: 0
            .saturating_add((444_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64and(r: u32, ) -> Weight {
        (3_153_000 as Weight)
            // Standard Error: 0
            .saturating_add((83_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64or(r: u32, ) -> Weight {
        (3_162_000 as Weight)
            // Standard Error: 0
            .saturating_add((84_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64xor(r: u32, ) -> Weight {
        (3_180_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shl(r: u32, ) -> Weight {
        (3_171_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shrs(r: u32, ) -> Weight {
        (3_160_000 as Weight)
            // Standard Error: 0
            .saturating_add((73_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shru(r: u32, ) -> Weight {
        (3_160_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotl(r: u32, ) -> Weight {
        (3_192_000 as Weight)
            // Standard Error: 0
            .saturating_add((72_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotr(r: u32, ) -> Weight {
        (3_178_000 as Weight)
            // Standard Error: 0
            .saturating_add((73_000 as Weight).saturating_mul(r as Weight))
    }
}